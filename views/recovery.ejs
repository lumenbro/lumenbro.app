<!DOCTYPE html>
<html>
<head>
  <title>LumenBro Account Recovery</title>
  <script src="/static/turnkey.min.js"></script>  <!-- Your bundled SDK -->
</head>
<body>
  <div id="recovery-container" style="display: none;"></div>  <!-- Hidden iframe container -->

  <h2>Init Recovery Email</h2>
  <form id="init-form">
    <label>Email</label>
    <input type="email" id="email" value="<%= email %>" required>
    <label>Organization ID</label>
    <input type="text" id="orgId" value="<%= org_id %>" required>
    <button type="submit">Init Recovery</button>
  </form>

  <h2>Inject Bundle & Recover</h2>
  <p>Check your email for the recovery code/bundle and paste it below after init.</p>
  <form id="inject-form">
    <label>Auth Bundle</label>
    <textarea id="authBundle" required></textarea>
    <button type="submit">Submit Bundle & Create New Passkey</button>
  </form>

  <script>
    const { IframeStamper, getWebAuthnAttestation } = window.Turnkey;

    let iframeStamper;
    let targetPublicKey;

    async function initIframe() {
      const container = document.getElementById('recovery-container');
      iframeStamper = new IframeStamper({
        iframeUrl: 'https://auth.turnkey.com',
        iframeContainer: container,
        iframeElementId: 'turnkey-iframe'
      });
      targetPublicKey = await iframeStamper.init();
      return targetPublicKey;
    }

    window.addEventListener('load', async () => {
      try {
        await initIframe();
      } catch (e) {
        alert('Iframe init failed on load: ' + e.message);
      }
    });

    document.getElementById('init-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      try {
        const email = document.getElementById('email').value;
        const orgId = document.getElementById('orgId').value;
        const response = await fetch('/init-recovery', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orgId, email, targetPublicKey })
        });
        const data = await response.json();
        if (data.success) {
          const userId = data.userId;
          localStorage.setItem('turnkeyUserId', userId);
          alert('Recovery initiated. Check your email for the code.');
        } else {
          alert('Error: ' + data.error);
        }
      } catch (e) {
        alert('Init failed: ' + e.message);
      }
      return false;
    });

    document.getElementById('inject-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('Inject form submit triggered');
      const authBundle = document.getElementById('authBundle').value;
      const email = document.getElementById('email').value;
      const orgId = document.getElementById('orgId').value;
      let userId = localStorage.getItem('turnkeyUserId');
      if (!userId) {
        alert('User ID not found. Please re-init recovery.');
        return false;
      }
      try {
        console.log('Starting injection...');
        await iframeStamper.injectCredentialBundle(authBundle);
        console.log('Bundle injected, creating passkey...');

        const challengeBytes = new Uint8Array(32);
        window.crypto.getRandomValues(challengeBytes);
        let challenge = btoa(String.fromCharCode(...challengeBytes));
        challenge = challenge.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');

        const attestation = await getWebAuthnAttestation({
          publicKey: {
            rp: { name: 'LumenBro', id: window.location.hostname },
            user: { id: new TextEncoder().encode(email).slice(0, 64), name: email, displayName: email },
            challenge: challengeBytes,
            pubKeyCredParams: [
              { type: 'public-key', alg: -7 },
              { type: 'public-key', alg: -257 }
            ],
            authenticatorSelection: { residentKey: 'required', userVerification: 'preferred' }
          }
        });
        const authenticator = {
          authenticatorName: 'Recovered Passkey',
          challenge,
          attestation
        };
        console.log('Passkey created, recovering user...');

        const body = {
          type: "ACTIVITY_TYPE_RECOVER_USER",
          timestampMs: String(Date.now()),
          organizationId: orgId,
          parameters: {
            userId,
            authenticator
          }
        };
        const bodyStr = JSON.stringify(body);
        console.log('Recover payload:', bodyStr);

        const stamp = await iframeStamper.stamp(bodyStr);
        const headers = {
          'Content-Type': 'application/json',
          [stamp.stampHeaderName]: stamp.stampHeaderValue,
          'X-Client-Version': '@turnkey/sdk-browser@5.3.3'
        };
        const response = await fetch('https://api.turnkey.com/public/v1/submit/recover_user', {
          method: 'POST',
          headers,
          body: bodyStr
        });
        const data = await response.json();
        console.log('Recover response:', data);

        if (data.activity.status === 'ACTIVITY_STATUS_COMPLETED') {
          localStorage.removeItem('turnkeyUserId');  // Clean up after success
          alert('Recovery complete! New passkey added.');
        } else {
          alert('Recovery failed: ' + JSON.stringify(data));
        }
      } catch (e) {
        console.error('Injection/recovery error:', e);
        alert('Error during injection or passkey creation: ' + e.message);
      }
      return false;
    });
  </script>
</body>
</html>
