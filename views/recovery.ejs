<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recovery</title>
</head>
<body>
    <div id="recovery-iframe-container" style="display: none;"></div>

    <h2>Init Recovery Email</h2>

    <form id="init-form">
        <label>Email</label>
        <input type="text" id="email" value="<%= email %>">
        <label>Organization ID</label>
        <input type="text" id="orgId" value="<%= org_id %>">
        <button type="submit">Init Recovery</button>
    </form>

    <h2>Inject Bundle & Recover</h2>
    <p>Check your email for the recovery code/bundle and paste it below after init.</p>

    <form id="recover-form" style="display: none;">
        <label>Auth Bundle</label>
        <textarea id="authBundle"></textarea>
        <button type="submit">Submit Bundle & Create New Passkey</button>
    </form>

    <div id="status"></div>

    <script src="/static/turnkey.min.js"></script>
    <script>
        // Assuming turnkey.min.js exposes Turnkey and IframeStamper globally
        const Turnkey = window.Turnkey;
        const IframeStamper = window.IframeStamper;

        const iframeElementId = 'recovery-iframe';
        const iframeContainer = document.getElementById('recovery-iframe-container');
        const iframeStamper = new IframeStamper({
            iframeUrl: 'https://recovery.turnkey.com',
            iframeElementId,
            iframeContainer,
        });

        const turnkeyClient = new Turnkey.TurnkeyClient({
            baseUrl: 'https://api.turnkey.com',
        }, iframeStamper);

        // Init form submit
        document.getElementById('init-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const status = document.getElementById('status');
            status.innerText = 'Initializing...';

            try {
                await iframeStamper.init();
                const targetPublicKey = await iframeStamper.publicKey();

                const email = document.getElementById('email').value;
                const orgId = document.getElementById('orgId').value;

                const response = await fetch('/init-recovery', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orgId, email, targetPublicKey }),
                });
                const data = await response.json();
                if (!data.success) throw new Error(data.error);

                const userId = data.userId;
                localStorage.setItem('recoveryUserId', userId);
                localStorage.setItem('recoveryOrgId', orgId);
                localStorage.setItem('recoveryEmail', email);

                status.innerText = 'Init successful! Check your email for the bundle.';
                document.getElementById('recover-form').style.display = 'block';
            } catch (e) {
                status.innerText = 'Error: ' + e.message;
            }
        });

        // Recover form submit
        document.getElementById('recover-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const status = document.getElementById('status');
            status.innerText = 'Recovering...';

            try {
                const authBundle = document.getElementById('authBundle').value;
                const email = localStorage.getItem('recoveryEmail');
                await iframeStamper.injectEmailRecoveryBundle(authBundle);

                // Create new passkey
                const challengeBuffer = crypto.getRandomValues(new Uint8Array(32));
                const challenge = Turnkey.base64UrlEncode(challengeBuffer);
                const credential = await navigator.credentials.create({
                    publicKey: {
                        challenge: challengeBuffer,
                        rp: { name: 'LumenBro' },
                        user: {
                            id: new Uint8Array(16),
                            name: email,
                            displayName: email,
                        },
                        pubKeyCredParams: [{ type: 'public-key', alg: -7 }],
                        authenticatorSelection: { userVerification: 'preferred' },
                    },
                });

                const attestation = Turnkey.base64UrlEncode(new Uint8Array(credential.response.attestationObject));
                const authenticatorName = 'Recovered Passkey';

                const userId = localStorage.getItem('recoveryUserId');
                const orgId = localStorage.getItem('recoveryOrgId');

                const response = await turnkeyClient.recoverUser({
                    type: 'ACTIVITY_TYPE_RECOVER_USER',
                    timestampMs: String(Date.now()),
                    organizationId: orgId,
                    parameters: {
                        userId,
                        authenticator: {
                            authenticatorName,
                            challenge,
                            attestation,
                        },
                    },
                });

                const authenticatorId = response.activity.result.recoverUserResult.authenticatorId;
                status.innerText = 'Recovery successful! Notifying via Telegram...';

                // Trigger server notification for Telegram
                await fetch('/notify-recovery-complete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orgId, email, authenticatorId }),
                });

                status.innerText = 'Telegram notification sent! Check your messages.';
            } catch (e) {
                status.innerText = 'Error: ' + e.message;
            }
        });
    </script>
</body>
</html>
